<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2012 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-javascript-howto">
  <title>JavaScript How-to</title>

  <para>This chapter shows how to perform some of the most common editing
  operations.</para>

  <section>
    <title>How to create a new geometry</title>

    <para>This section describes how to let the user draw a new geometry of
    some pre-defined type. The idea is that the user can click on the map to
    insert vertices into the geometry. This requires three steps:</para>

    <orderedlist>
      <listitem>
        <para>Set up a <code>GeometryEditor</code> for the map. The editor is
        responsible for drawing the edited geometry and setting the correct
        event handler for capturing user events</para>
      </listitem>

      <listitem>
        <para>Prepare an initial (empty) geometry for the editor. The editor
        always operates on a single geometry, which has to be set
        programmatically.</para>
      </listitem>

      <listitem>
        <para>Prepare the intial state of editing. During the editing phase,
        the editor is in one of the 3 main states: idle (waiting for the user
        to select), inserting (inserting vertices) or dragging (dragging a
        part of the geometry). To start drawing on an empty geometry, the
        inserting state has to be activated and the insert index (index of the
        vertex that will be inserted) should be set.</para>
      </listitem>
    </orderedlist>

    <para>The following code has to be executed (<code>onGeomajasLoad()</code>
    is called automatically on page load):</para>

    <programlisting>var map; // The map object.
var editor; // Geometry editor. Holds the central editing service, the renderer, the styling information...
var service; // The central editing service.

function onGeomajasLoad() {
 map = Geomajas().createMap("app", "mapMain", "js-map-element");
 editor = new org.geomajas.plugin.editing.GeometryEditor(); // (1)
 editor.setMap(map); // (1)
 service = editor.getService();
}

function drawPolygon() {
  var geometry = new org.geomajas.jsapi.spatial.Geometry("Polygon", 0, 0); // (2)
  service.start(geometry);// (2)
  service.addEmptyChild(); // (3)
  var index = service.getIndexService().create("vertex", [0, 0]); // (3)
  service.setInsertIndex(index); // (3)
  service.setEditingState("inserting"); // (3)
}</programlisting>

    <para>From there on, the user can take over. Depending on the use case,
    the editing service could be stopped by letting the user click outside the
    finished geometry</para>

    <programlisting>editor.getBaseController().setClickToStop(true);</programlisting>

    <para>or by explicitly stopping the service:</para>

    <programlisting>editor.getEditService().stop();</programlisting>

    <para>The editing happens on the same object that was originally passed to
    the service.</para>
  </section>

  <section>
    <title>How to add an interior ring</title>

    <para>The following steps have to be taken:</para>

    <orderedlist>
      <listitem>
        <para>Add an extra empty ring to the polygon</para>
      </listitem>

      <listitem>
        <para>Prepare the editing state to start inserting at the first child
        index of the ring</para>
      </listitem>
    </orderedlist>

    <para>The following code assumes that the polygon being edited already has
    an exterior ring:</para>

    <programlisting>function insertHole() {
  var geometry = service.getGeometry();
  var ringIndex = service.addEmptyChild(); // (1)
  var indexValue = ringIndex.getValue();
  var index = service.getIndexService().create("vertex", [indexValue, 0]); // (2)
  service.setInsertIndex(index); // (2)
  service.setEditingState("inserting"); // (2)
}</programlisting>
  </section>

  <section>
    <title>How to delete an interior ring</title>

    <para>The following steps have to be taken:</para>

    <orderedlist>
      <listitem>
        <para>Find the correct index for the ring</para>
      </listitem>

      <listitem>
        <para>Call the service to remove the ring</para>
      </listitem>
    </orderedlist>

    <para>The following code deletes the first interior ring if the polygon
    has one:</para>

    <programlisting>function deletefirstHole() {
    var geometry = service.getGeometry();
    if(geometry.getGeometries().length &gt; 1) {
        var index = service.getIndexService().create("geometry", [1]); // (1)
        service.remove([index]); // (2)
    }
}</programlisting>
  </section>

  <section>
    <title>How to register a geometry handler</title>

    <para>Geometry handlers are necessary to apply custom editing actions when
    certain mouse events occur. The concept is similar to normal map
    controllers, but geometry handlers add information about the geometry
    index of the part of the geometry on which the mouse event occurs. To
    register a geometry handler, the following steps have to be taken:</para>

    <orderedlist>
      <listitem>
        <para>Create an instance of
        <code>org.geomajas.plugin.editing.handler.GeometryHandlerFactory
        </code></para>
      </listitem>

      <listitem>
        <para>Set mouse event functions for each of the mouse events that have
        to be captured</para>
      </listitem>

      <listitem>
        <para>Register the factory.</para>
      </listitem>

      <listitem>
        <para>Redraw the edited geometry by calling
        <code>editor.getRenderer().redraw()</code>.This is necessary to
        activate the handler.</para>
      </listitem>

      <listitem>
        <para>Deregister the factory and call redraw when finished</para>
      </listitem>
    </orderedlist>

    <para>The following code illustrates such registration in the case of a
    custom handler for deletion of interior rings. </para>

    <programlisting>function registerDeleteHole() {
    factory = new org.geomajas.plugin.editing.handler.GeometryHandlerFactory(); // (1)
    factory.setUpHandler(function(event) {   // (2)
        var index = factory.getIndex();
        if (service.getIndexStateService().isMarkedForDeletion(index)) {
            try {
                service.remove([index]);
            } catch (e) {
                alert("Error occurred while deleting the inner ring: " + e.getMessage());
            }
        }
    });
    factory.setMouseOverHandler(function(event) {  // (2)
        var index = factory.getIndex();
        var geometryType = service.getIndexService().getGeometryType(service.getGeometry(), index);
        if (geometryType == "LinearRing") {
            if (service.getIndexService().getValue(index) &gt; 0) {
                // Only inner rings must be marked. The outer shell can remain as-is.
                service.getIndexStateService().markForDeletionBegin([index]);
            }
        }
    });
    factory.setMouseOutHandler(function(event) {  // (2)
        var index = factory.getIndex();
        if (service.getIndexStateService().isMarkedForDeletion(index)) {
            service.getIndexStateService().markForDeletionEnd([index]);
        }
    });
    EditingHandlerRegistry().addGeometryHandlerFactory(factory);  // (3)  
    editor.getRenderer().redraw();  // (4)  
}

function unRegisterDeleteHole() {
    if(factory) {
        EditingHandlerRegistry().removeGeometryHandlerFactory(factory); // (5)
        editor.getRenderer().redraw();  // (5)
    }
}</programlisting>
  </section>
</chapter>
