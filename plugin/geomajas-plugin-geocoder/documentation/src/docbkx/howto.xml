<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This file is part of Geomajas, a component framework for building
  ~ rich Internet applications (RIA) with sophisticated capabilities for the
  ~ display, analysis and management of geographic information.
  ~ It is a building block that allows developers to add maps
  ~ and other geographic data capabilities to their web applications.
  ~
  ~ Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<chapter id="chapter-howto">
  <title>How-to</title>

  <para>This chapter details the extension possibilities of the geocoder
  plug-in.</para>

  <section id="switchserv">
    <title>How to allow users to switch between geocoder services</title>

    <para>If you want your users to select between several geocoder services,
    you can use the servicePattern property in the command request to select
    the service.</para>

    <para>You could for example configure both the Yahoo! PlaceFinder and
    GeoNames geocoder services. It is best that you provide explicit names to
    each service. You can now add a selection widget in your user interface.
    Depending on the selected value, you can use the setServicePattern()
    method of GeocoderWidget or alternatively on the
    GetLocationForStringRequest object of the command invocation to assure the
    selected geocoder service is used. Note that the service pattern is a
    regular expression. For alphanumerical names, just providing the name as
    pattern will work.</para>
  </section>

  <section id="writeserv">
    <title>How to write a geocoder service</title>

    <para>Writing a geocoder service is reasonable easy. All you have to do is
    create an implementation of the GeocoderService interface (listing <xref
    linkend="GeocoderService" />). The getCrs() method is used by Geomajas to
    know the coordinate system which is used for the results of your service.
    This is used to convert to the coordinate system of the client.</para>

    <para>The name is used to select which services should be used for the
    search. It is recommended that you provide both a default name and a
    setter to allow users to change this.</para>

    <xi:include href="listing/GeocoderService.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The getLocation() method does the actual work of converting the
    location strings (ordered from most general, biggest area, to more
    specific) to a location. The method is expected to return null or an empty
    list if no results where found for the location string, or one object if
    the strings were matched, or multiple results when the matching was
    ambiguous and resulted in several alternatives.</para>

    <para>The result itself contains the information from listing <xref
    linkend="GetLocationResult" />.</para>

    <xi:include href="listing/GetLocationResult.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The fields include:</para>

    <para><itemizedlist>
        <listitem>
          <para><emphasis>canonicalStrings</emphasis>: the preferred strings
          to use for the location. Can be null if no preferred string exists
          or it is not knows. In that case, the client will get the search
          strings as result.</para>
        </listitem>

        <listitem>
          <para><emphasis>coordinate</emphasis>: the coordinate for the
          location. This field is only used when no envelope was given. The
          coordinate will be converted to the requested CRS and an area with
          will be built around this point (according to command
          configuration).</para>
        </listitem>

        <listitem>
          <para><emphasis>envelope</emphasis>: the bounding box for the
          location. This is the preferred result and has precedence over the
          coordinate field.</para>
        </listitem>

        <listitem>
          <para><emphasis>geocoderName</emphasis>: name of te geocoder which
          produced the result. You don't have to set this, it will be set by
          the command.</para>
        </listitem>

        <listitem>
          <para><emphasis>userData</emphasis>: any additional user data the
          geocoder may wish to return to the client.</para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section id="wrsplitserv">
    <title>How to write a service to split the input string</title>

    <para>The geocoder command uses an instance of SplitGeocoderStringService
    to split and sort the initial search string. This should help to make the
    searching easier and assure the separator for location indicators can be
    configured and is geocoder service independent.</para>

    <para>This way you can configure whether you prefer your users to type
    "London, UK", "UK, London", "London - UK" or something else.</para>

    <para>You basically have to implement the service in listing <xref
    linkend="SplitGeocoderStringService" /> and set that in the GeocoderInfo
    instance in your application context.</para>

    <xi:include href="listing/SplitGeocoderStringService.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>You have to provide two methods, one for splitting and one for
    combining.</para>
  </section>

  <section id="wricombserv">
    <title>How to write a service to combine results</title>

    <para>When multiple geocoder services found a match for the search string,
    an instance of CombineResultService is used to combine these results to
    one area. Two obvious options would be either to use the union or the
    intersection of the areas (these are already provided as
    CombineUnionService and CombineIntersectionService), but you can also
    define your own combination strategy.</para>

    <xi:include href="listing/CombineResultService.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>All you have to do is implement the combine() method. The strategy
    can be configured in the GeocoderInfo instance in your application
    context.</para>
  </section>

  <section id="chawidget">
    <title>How to change behaviour of the GeocoderWidget</title>

    <para>The widgets behaviour is controlled using two handler classes,
    SelectLocationHandler and SelectAlterativeHandler. For both only one
    handler can be configured for the widget.</para>

    <para>The SelectLocationHandler has a default implementation which zooms
    to the location which was found or selected. The default implementation is
    displayed in listing <xref linkend="DefaultSelectLocation" />.</para>

	  <xi:include href="listing/DefaultSelectLocation.xml"
				  xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The SelectAlternativeHandler is used when the location was
    considered ambiguous and several alternatives are returned. The default
    implementation (listing <xref linkend="???" />) puts a window on the map
    in which the correct location can be selected by the user. This uses the
    GeocoderAlternativesGrid which lists the options and invokes the
    SelectLocationHandler on the geocoder when the user selects a line.</para>

	  <xi:include href="listing/DefaultSelectAlternative.xml"
				  xmlns:xi="http://www.w3.org/2001/XInclude" />


  </section>
</chapter>
