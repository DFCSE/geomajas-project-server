<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This file is part of Geomajas, a component framework for building
  ~ rich Internet applications (RIA) with sophisticated capabilities for the
  ~ display, analysis and management of geographic information.
  ~ It is a building block that allows developers to add maps
  ~ and other geographic data capabilities to their web applications.
  ~
  ~ Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<chapter id="chapter-configuration">
  <title>Configuration</title>

  <para>Configuration for the geocoder plug-in.</para>

  <section>
    <title>Dependencies</title>

    <para>Make sure your include the plug-in in your project. If you are using
    Maven, add the following dependency to your pom:</para>

    <example>
      <title>Plug-in dependency</title>

      <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt;
    &lt;artifactId&gt;geomajas-plugin-geocoder&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
    </example>

    <para>If you want to use the geocoder widget for the GWT face, then you
    need the following two dependencies:</para>

    <example>
      <title>Plug-in GWT dependency</title>

      <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt;
    &lt;artifactId&gt;geomajas-plugin-geocoder-gwt&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt;
    &lt;artifactId&gt;geomajas-plugin-geocoder-gwt&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
    &lt;classifier&gt;sources&lt;/classifier&gt;
&lt;/dependency&gt;</programlisting>
    </example>

    <para>To use the widget, you have to include the geocoder GWT module
    description as in listing <xref linkend="GwtModule" />.</para>

    <xi:include href="../listing/GwtModule.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />
  </section>

  <section>
    <title>Geocoder command configuration</title>

    <para>When you include the geocoder dependency, you also have to configure
    the geocoder command or you will get an exception when the application
    context is built.</para>

    <para>An example configuration looks like this:</para>

    <xi:include href="../listing/exampleConfiguration.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>To configure the geocoder plugin, you have to create a bean
    instantiating the GeocoderInfo class.</para>

    <para>In the bean, you have to set the geocoderServices property to select
    which geocoder services you want to be used to attempt to convert the
    string to a location.</para>

    <para>Other properties you may want to set:</para>

    <para><itemizedlist>
        <listitem>
          <para><emphasis>splitGeocoderStringService</emphasis>: the service
          which should be used to split the location string into parts and to
          determine the order in which parts are given. Depending on this
          service, you may tell your users to search for "Antwerpen, BE", "BE,
          Antwerpen" or "Antwerpen; BE",...</para>
        </listitem>

        <listitem>
          <para><emphasis>combineResultService</emphasis>: service which
          combines the result when several geocoder services found a match for
          the location string.</para>
        </listitem>

        <listitem>
          <para><emphasis>loopAllServices</emphasis>: the command will loop
          all geocoder services which have been specified. Should this loop
          stop when one geocoder found either a match or some
          alternatives?</para>
        </listitem>

        <listitem>
          <para><emphasis>pointDisplayWidth</emphasis>: width in meters for
          the area which needs to be displayed on the map when the geocoder
          service returned a point. Defaults to 2000 (2km).</para>
        </listitem>

        <listitem>
          <para><emphasis>pointDisplayHeight</emphasis>: width in meters for
          the area which needs to be displayed on the map when the geocoder
          service returned a point. Defaults to 1000 (1km).</para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section>
    <title>Static regex geocoder service configuration</title>

    <para>The StaticRegexGeocoderService allows you to define the combinations
    of string to match and the locations directly in the configuration
    file.</para>

    <para>The strings to match are specified using regular
    expressions<footnote>
        <para>see <ulink
        url="http://download.oracle.com/javase/1.4.2/docs/api/java/util/regex/Pattern.html">http://download.oracle.com/javase/1.4.2/docs/api/java/util/regex/Pattern.html</ulink></para>
      </footnote>to allow more flexibility. Listing <xref
    linkend="RegexGeocoderInfo" /> shows a base configuration. You have to use
    the geocoderInfo property to configure the geolocator. This is done using
    a StaticRegexGeocoderInfo object which contains the coordinate space name
    (EPSG:900913 in this case, which is Mercator) and define the location
    mappings.</para>

    <xi:include href="../listing/RegexGeocoderInfo.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The location mappings themselves are contained in
    StaticRegexGeocoderLocationInfo instances. You have to specify the strings
    toMatch, and a location as either point of bounding box. You can specify
    the canonical form for the search.</para>

    <para>In listing <xref linkend="RegexPoint" /> you see a definition which
    will match a single location string starting with second. As this is done
    case independently, some examples of matching strings are "second" and
    SECondary". It indicates a point with coordinates (10000,10000).</para>

    <xi:include href="../listing/RegexPoint.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The location info object can also be used to match an area. In
    listing <xref linkend="RegexBbox" /> you see the location bounding box
    defined using the bbox property. If you would accidentally define both a
    bounding box and point coordinates, then the bounding box will be used for
    the result.</para>

    <xi:include href="../listing/RegexBbox.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>A location can also include extra data in the result. You need to
    wrap this data in a subclass of ClientUserDataInfo. The object to be
    returned can be defined using the userData property.</para>

    <xi:include href="../listing/RegexBboxUserData.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The toMatch property contains a list of strings which need to be
    matched in order. The matching checks every string in the location strings
    for a matching string in the toMatch list, in order. The matching is case
    independent and always matches the entire string. A level can be marked as
    optional in the location strings by using a question marks as prefix for
    the regular expression. The question mark is removed before the actual
    evaluation of the regular expression.</para>

    <para>As an example we will apply the example in listing <xref
    linkend="RegexMulti" /> to a couple of data sets.</para>

    <para><itemizedlist>
        <listitem>
          <para>["Belgium", "Antwerpen", "Booischot"]: matches, all three
          parts match the specific regular expressions.</para>
        </listitem>

        <listitem>
          <para>["Booischot", "Antwerpen", "Belgium"]: no match as the "BE.*"
          regular expression does not match "Booischot".</para>
        </listitem>

        <listitem>
          <para>["BE", "Booischot"]: matches, the "Antwerp.*" regular
          expression is marked as option using the "?" prefix.</para>
        </listitem>

        <listitem>
          <para>["Belgium","Antwerpen"]: does not match as the "Booischot"
          regular expression is not matched for lack of input strings.</para>
        </listitem>

        <listitem>
          <para>["Belgium", "Antwerpen", "Booischot", "Broekmansstraat"]: not
          matches as the last string "Broekmansstraat" does not have a
          matching regular expression.</para>
        </listitem>
      </itemizedlist></para>

    <xi:include href="../listing/RegexMulti.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>For this last case, where smaller divisions are not know (in this
    case the street name), you can end the list of regular expressions with
    "**" (see listing <xref linkend="RegexMultiOpenEnd" />). This will assure
    that any remaining strings from the input are discarded if any are
    remaining. This would assure that the last case in the previous list
    matches. The other cases would still have the same result.</para>

    <xi:include href="../listing/RegexMultiOpenEnd.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para></para>
  </section>

  <section>
    <title>GeoNames service configuration</title>

    <para>The GeonamesGeocoderService uses the search web service at
    geonames.org to handle the geocoder requests. The service does not allow
    any configuration, so its inclusion is pretty straightforward.</para>

    <xi:include href="../listing/GeonamesConfiguration.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The GeoNames service never returns more than 50 results.</para>

    <para>When the initial query returned no results, it will retry the search
    using fuzzy matching.</para>
  </section>

  <section>
    <title>Yahoo! PlaceFinder geocoder service configuration</title>

    <para>This uses the Yahoo! PlaceFinder service (<ulink
    url="???">http://developer.yahoo.com/geo/placefinder/</ulink>). When using
    this geocoder, you need a appid from Yahoo! and you have to make sure you
    comply with their terms of use.</para>

    <para>To use the geocoder, just create the bean and set the appId.</para>

    <xi:include href="../listing/PlaceFinderConfig.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>There are a couple of properties which influence how the appId can
    be passed:</para>

    <para><itemizedlist>
        <listitem>
          <para><emphasis>appId</emphasis>: you just define the appId in the
          configuration file.</para>
        </listitem>

        <listitem>
          <para><emphasis>appIdProperty</emphasis>: the appId is read from the
          property which is specified. This can be helpful if you don't want
          to hardcode the property in your configuration files for some
          reason.</para>
        </listitem>

        <listitem>
          <para><emphasis>skipAppIdCheck</emphasis>: normally an exception is
          thrown when the Yahoo! PlaceFinder geocoder is created without a
          appId. By setting this property to true, you can avoid this
          exception, making sure your application will run without the appId
          (though obviously no results can be found).</para>
        </listitem>
      </itemizedlist></para>
  </section>
</chapter>
