<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This file is part of Geomajas, a component framework for building
  ~ rich Internet applications (RIA) with sophisticated capabilities for the
  ~ display, analysis and management of geographic information.
  ~ It is a building block that allows developers to add maps
  ~ and other geographic data capabilities to their web applications.
  ~
  ~ Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-configuration">
  <title>Configuration</title>

  <para></para>

  <section id="geotools">
    <title>GeoTools layer configuration</title>

    <para>This section handles possible configurations using the GeoTools
    layer. As GeoTools supports a whole range of data formats, not all of them
    will be covered here. </para>

    <para></para>

    <para>Apart from a reference to the layer info, you can set the following
    parameters:</para>

    <table>
      <title>GeoToolsLayer configuration</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1*" />

        <colspec colnum="2" colwidth="2*" />

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>url</entry>

            <entry>Url for the shape file. Apart from standard protocCols
            supported by java, you can also use the "classpath:" protocol (the
            resource location should not start with a slash) to refer to shape
            files on the classpath.</entry>
          </row>

          <row>
            <entry>dbtype</entry>

            <entry>Database type, useful when the data store is a
            database.</entry>
          </row>

          <row>
            <entry>parameters</entry>

            <entry>You can define additional parameters which can be passed to
            the GeoTools data store. These are name/value pairs which are
            passed in <code>org.geomajas.configuration.Parameter</code>
            objects.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section id="WFS">
      <title>Configuring a Web Feature Service (WFS) layer</title>

      <para>In order to read data from a WFS, a GeoTools layer is required.
      Currently GeoTools has support for WFS 1.0 and 1.1, and support for
      WFS-T 1.0. As the GeoTools WFS plug-in is not by default part of the
      classpath, you must add it to the classpath manually. First things
      first, the XML configuration. There are 2 ways of configuring a WFS
      layer through the GeoTools layer. As Geomajas uses a GeoTools DataStore
      behind the screens, it is possible to configure this DataStore
      separately, and than attach it to the GeoTools layer. This would have
      the advantage of re-using the same GeoTools DataStore over multiple
      layers. Alternatively you can configure the required parameters directly
      within the Layer configuration.</para>

      <para>In general, the following parameters can be configured:</para>

      <para><itemizedlist>
          <listitem>
            <para><emphasis>WFSDataStoreFactory:GET_CAPABILITIES_URL</emphasis>:
            URL for the getCapabilities document on the server
            instance.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:PROTOCOL</emphasis>: determine
            which HTTP command use when requesting WFS functionality. Set this
            value to "true" for POST, "false" for GET or NULL for AUTO.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:USERNAME</emphasis>: set the
            user name which should be used to authenticate the connection.
            This parameter should not be used without the password
            parameter.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:PASSWORD</emphasis>: set the
            password which should be used to authenticate the connection. This
            parameter should not be used without the user name
            parameter.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:TIMEOUT</emphasis>: specify
            the connection timeout in milliseconds. This parameter has a
            default value of 3000ms.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:BUFFER_SIZE</emphasis>: set
            the buffer size for the features. This parameter has a default
            value of 10 features.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:TRY_GZIP</emphasis>: indicate
            whether the data store should use gzip compression to transfer
            data if the server supports it. Default is true.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:LENIENT</emphasis>: indicate
            whether the data store should do its best to create features from
            the provided data even if it does not accurately match the schema.
            Errors will be logged but the parsing will continue if this is
            true. Default is false.</para>
          </listitem>
        </itemizedlist></para>

      <para>Note that most of the parameters above are optional. Only the
      capabilities url is required.</para>

      <para>Configuring a WFS layer, with a separate DataStore:</para>

      <programlisting>&lt;!-- GeoTools DataStore: connects to a WFS server --&gt;
&lt;bean name="<emphasis role="bold">wfsDatastore</emphasis>" class="org.geomajas.layer.geotools.DataStoreFactory" factory-method="create"&gt;
   &lt;constructor-arg&gt;
      &lt;map&gt;
         &lt;entry key="WFSDataStoreFactory:GET_CAPABILITIES_URL"
            value="http://www.some-wfs.com/ows?service=WFS&amp;amp;VERSION&amp;#61;1.0.0&amp;amp;request&amp;#61;GetCapabilities" /&gt;
         &lt;entry key="WFSDataStoreFactory.TIMEOUT" value="5000" /&gt;
      &lt;/map&gt;
   &lt;/constructor-arg&gt;
&lt;/bean&gt;

&lt;!-- Layer definition, that uses the WFS DataStore --&gt;
&lt;bean name="myWfsLayer" class="org.geomajas.layer.geotools.GeoToolsLayer"&gt;
   &lt;property name="layerInfo" ref="someLayerInfo" /&gt;
   &lt;property name="dataStore" ref="<emphasis role="bold">wfsDatastore</emphasis>" /&gt;
&lt;/bean&gt;</programlisting>

      <para>Alternatively, the layer can be configured directly with the
      required parameters:</para>

      <programlisting>&lt;bean name="anotherWfsLayer" class="org.geomajas.layer.geotools.GeoToolsLayer"&gt;
   &lt;property name="parameters"&gt;
      &lt;list&gt;
         &lt;bean class="org.geomajas.configuration.Parameter"&gt;
            &lt;property name="name" value="WFSDataStoreFactory:GET_CAPABILITIES_URL" /&gt;
            &lt;property name="value" value="aaaaaaa" /&gt;
         &lt;/bean&gt;
         &lt;bean class="org.geomajas.configuration.Parameter"&gt;
            &lt;property name="name" value="WFSDataStoreFactory:TIMEOUT" /&gt;
            &lt;property name="value" value="5000" /&gt;
         &lt;/bean&gt;
      &lt;/list&gt;
   &lt;/property&gt;
   &lt;property name="layerInfo" ref="blablaInfo" /&gt;
&lt;/bean&gt; </programlisting>

      <para>As said in the beginning of this section, the GeoTools WFS library
      needs to be added as a dependency in your project. When using Maven, you
      can add the following dependency:</para>

      <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;org.geotools&lt;/groupId&gt;
  &lt;artifactId&gt;gt-wfs&lt;/artifactId&gt;
  &lt;version&gt;${geotools-version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
    </section>

    <section id="db">
      <title>Configuring a database layer (PostGIS, Oracle Spatial,...)</title>

      <warning>
        <para>The configurations in this section still need to be
        doublechecked! If you find errors, please post it on the forum.</para>
      </warning>

      <para>Configuring a GeoTools layer that makes use of a PostGis database,
      is again a question of using the correct parameters. As with other
      examples of using a GeoTools layer, there is the choice of configuring
      the GetoTools DataStore separately or not. By configuring the DataStore
      separately, it can be used by multiple layers. In the case of a
      database, this method would almost always be preferable.</para>

      <para>In general, the following parameters can be configured:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>namespace</emphasis>: The namespace of the database
          (i.e. "postgis")</para>
        </listitem>

        <listitem>
          <para><emphasis>dbtype</emphasis>: The type of database: (i.e.
          "postgis")</para>
        </listitem>

        <listitem>
          <para><emphasis>database</emphasis>: The name of the
          database.</para>
        </listitem>

        <listitem>
          <para><emphasis>user</emphasis>: The user name to log in
          with.</para>
        </listitem>

        <listitem>
          <para><emphasis>passwd</emphasis>: The user's password.</para>
        </listitem>

        <listitem>
          <para><emphasis>host</emphasis>: The hostname or IP address of the
          machine where the database is located.</para>
        </listitem>

        <listitem>
          <para><emphasis>port</emphasis>: The port where the database runs
          (default for PostGIS is 5432).</para>
        </listitem>
      </itemizedlist>

      <para>Configuring a database layer, with a separate DataStore:</para>

      <programlisting>&lt;!-- GeoTools DataStore: connects to a PostGIS database --&gt;
&lt;bean name="<emphasis role="bold">postGisDatastore</emphasis>" class="org.geomajas.layer.geotools.DataStoreFactory" factory-method="create"&gt;
   &lt;constructor-arg&gt;
      &lt;map&gt;
         &lt;entry key="namespace" value="postgis" /&gt;
         &lt;entry key="dbtype" value="postgis" /&gt;
         &lt;entry key="database" value="some_database" /&gt;
         &lt;entry key="user" value="some_user" /&gt;
         &lt;entry key="passwd" value="some_password" /&gt;
         &lt;entry key="host" value="localhost" /&gt;
         &lt;entry key="port" value="5432" /&gt;
      &lt;/map&gt;
   &lt;/constructor-arg&gt;
&lt;/bean&gt;

&lt;!-- Layer definition, that uses the DataStore --&gt;
&lt;bean name="myPostGisLayer" class="org.geomajas.layer.geotools.GeoToolsLayer"&gt;
   &lt;property name="layerInfo" ref="someLayerInfo" /&gt;
   &lt;property name="dataStore" ref="<emphasis role="bold">postGisDatastore</emphasis>" /&gt;
&lt;/bean&gt;</programlisting>

      <para>Alternatively one can configure the layer directly with the
      required parameters:</para>

      <programlisting>&lt;bean name="myPostGisLayer" class="org.geomajas.layer.geotools.GeoToolsLayer"&gt;
   &lt;property name="parameters"&gt;
      &lt;list&gt;
         &lt;bean class="org.geomajas.configuration.Parameter"&gt;
            &lt;property name="name" value="namespace" /&gt;
            &lt;property name="value" value="postgis" /&gt;
         &lt;/bean&gt;
         &lt;bean class="org.geomajas.configuration.Parameter"&gt;
            &lt;property name="name" value="dbtype" /&gt;
            &lt;property name="value" value="postgis" /&gt;
         &lt;/bean&gt;
         &lt;bean class="org.geomajas.configuration.Parameter"&gt;
            &lt;property name="name" value="database" /&gt;
            &lt;property name="value" value="some_database" /&gt;
         &lt;/bean&gt;
         &lt;bean class="org.geomajas.configuration.Parameter"&gt;
            &lt;property name="name" value="user" /&gt;
            &lt;property name="value" value="some_user" /&gt;
         &lt;/bean&gt;
         &lt;bean class="org.geomajas.configuration.Parameter"&gt;
            &lt;property name="name" value="passwd" /&gt;
            &lt;property name="value" value="some_password" /&gt;
         &lt;/bean&gt;
         &lt;bean class="org.geomajas.configuration.Parameter"&gt;
            &lt;property name="name" value="host" /&gt;
            &lt;property name="value" value="localhost" /&gt;
         &lt;/bean&gt;
         &lt;bean class="org.geomajas.configuration.Parameter"&gt;
            &lt;property name="name" value="port" /&gt;
            &lt;property name="value" value="5432" /&gt;
         &lt;/bean&gt;
      &lt;/list&gt;
   &lt;/property&gt;
   &lt;property name="layerInfo" ref="blablaInfo" /&gt;
&lt;/bean&gt; </programlisting>

      <para>Don't forget to also add the necessary database driver libraries
      to your project. Here is an example that adds PostGIS drivers and
      GeoTools PostGIS plug-in to the pom.xml (when using Maven):</para>

      <programlisting>&lt;dependency&gt;
   &lt;groupId&gt;org.postgis&lt;/groupId&gt;
   &lt;artifactId&gt;postgis-jdbc&lt;/artifactId&gt;
   &lt;version&gt;1.1.6&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;postgresql&lt;/groupId&gt;
   &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
   &lt;version&gt;8.1-407.jdbc3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;org.geotools&lt;/groupId&gt;
   &lt;artifactId&gt;gt-postgis&lt;/artifactId&gt;
   &lt;version&gt;${geotools-version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>

      <note>
        <para>When configuring the general layer information (and attribute
        information), the value may differ, depending on the kind of database
        that you use. For example, column names in a PostGIS database all have
        lower cases, and so the Geomajas attribute configuration should
        reflect this. If you are using Oracle Spatial on the other hand all
        column names are uppercase, so your configuration should contain
        uppercases for the attribute names.</para>
      </note>
    </section>
  </section>

  <section id="shape">
    <title>Shape in memory layer</title>

    <para>This layer is backed by a shape file that is loaded in memory at
    startup. All layer updates are performed in memory, so this layer is not
    really useful except for examples.</para>

    <para><table>
        <title>ShapeInMemLayer configuration</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*" />

          <colspec colnum="2" colwidth="2*" />

          <thead>
            <row>
              <entry>ShapeInMemLayer configuration</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>url</entry>

              <entry>Url for the shape file. Apart from standard protocols
              supported by java, you can also use the "classpath:" protocol
              (the resource location should not start with a slash) to refer
              to shape files on the classpath.</entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>
  </section>

  <section id="tx">
    <title>Transaction configuration</title>

    <para>For GeoTools layers, the following transaction configuration can be
    used:</para>

    <xi:include href="listing/GeoToolsTx.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>Starting from the top, the following are defined:</para>

    <itemizedlist>
      <listitem>
        <para>The data store: this is GeoTools' primary data object and will
        be referenced in the GeoTools layer. The parameters define the
        connection properties of the underlying physical medium (PostGis in
        this case)</para>
      </listitem>

      <listitem>
        <para>A tag to enable annotation-based transactional behavior,
        internally used by Geomajas to decide which commands need transaction
        support</para>
      </listitem>

      <listitem>
        <para>The platform transaction manager for GeoTools</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
