<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This file is part of Geomajas, a component framework for building
  ~ rich Internet applications (RIA) with sophisticated capabilities for the
  ~ display, analysis and management of geographic information.
  ~ It is a building block that allows developers to add maps
  ~ and other geographic data capabilities to their web applications.
  ~
  ~ Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-configuration">
  <title>Configuration</title>

  <para></para>

  <section>
    <title>Hibernate layer configuration</title>

    <para>The Hibernate layer is based on the popular Hibernate O/R mapping
    framework. It uses a special spatial extension of Hibernate,
    unsurprisingly called Hibernate Spatial. The Hibernate Spatial project has
    its project website at <ulink
    url="http://www.hibernatespatial.org/">http://www.hibernatespatial.org</ulink>.
    The spatial extensions or dialects (in Hibernate language) allow the
    definition of spatial types and the execution of spatial queries in a
    database independent way.</para>

    <para>You need to include the following dependencies to make this work.
    This needs to include the hibernate spatial provider, in this example,
    PostGis.</para>

    <xi:include href="../listing/HibernateLayerDependency.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>A Hibernate layer cannot be defined by configuration only. As in
    every O/R model, there has to be a mapping between Java classes and tables
    in the database. In the most simple case there is a one-to-one mapping
    between a single class and a single spatial table.</para>

    <para>The following listing shows the (partial) definition of a Hibernate
    annotated Java class <code>Road.java</code> that is mapped to a table
    <code>roads</code> in the database.</para>

    <xi:include href="../listing/HibernateRoadsSample.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The field annotations describe the relation between the fields of
    the class and the columns in the table. A special annotation
    <code>@Type</code> with type
    <code>org.hibernatespatial.GeometryUserType</code> is used to map the
    <code>geometry</code> field to the <code>the_geom</code> spatial
    column.</para>

    <para>Once the Java class mapping is finished, the actual layer
    configuration can be made. An example configuration that matches the
    <code>Road.java</code> class is shown below:</para>

    <xi:include href="../listing/HibernateRoadsLayer.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The first property <code>layerInfo</code> is the reference to the
    <code>VectorLayerInfo</code> object. While it can be defined inline, it
    has been defined as an outer bean for clarity here.</para>

    <para>The <code>featureModel</code> property refers to the internal
    feature accessor face of the layer. This property will probably be removed
    as it has no additional configuration parameters for the moment.</para>

    <para>The <code>sessionFactory</code> property refers to the Hibernate
    session factory. This is the same factory that has to be defined by the
    transaction configuration.</para>

    <para>The <code>dateFormat</code> property determines how the layer will
    convert date values to strings and vice versa.</para>

    <para>As already mentioned, the bulk part of the layer's metadata is
    defined through the <code>VectorLayerInfo</code> object. An example
    definition of this object is given below:</para>

    <xi:include href="../listing/HibernateRoadsInfo.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The feature metadata can be found in the <code>FeatureInfo</code>
    object. This objects contains the complete feature type description (id,
    attributes and geometry) as well as the validation rules for the
    attributes. An example definition of this object is given below:</para>

    <xi:include href="../listing/HibernateRoadsFeatureInfo.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />
  </section>

  <section>
    <title>Transaction configuration</title>

    <para>Transaction configuration for Hibernate layers:</para>

    <xi:include href="../listing/HibernateTx.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>Starting from the top, the following are defined:</para>

    <itemizedlist>
      <listitem>
        <para>The data source: this specifies the connection pool type and the
        connection properties of the database (PostGis in this case)</para>
      </listitem>

      <listitem>
        <para>The session factory: this is Hibernate's primary singleton and
        used by the Hibernate layer to access the session/connection</para>
      </listitem>

      <listitem>
        <para>A tag to enable annotation-based transactional behavior,
        internally used by Geomajas to decide which commands need transaction
        support</para>
      </listitem>

      <listitem>
        <para>The platform transaction manager for Hibernate</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
